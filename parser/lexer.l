%{
#include "lexer.hpp"  // Generated by bison
#include "location.hh"
#include <string>
extern int yyerror(const char*);
#define yyterminate() yy::parser::make_END(yy::location());
%}

%option noyywrap
%option nodefault
%option yyclass="Scanner"
%option c++

%%

[ \t\n]       ; // Skip whitespace
"("           { return yy::parser::make_LPAREN(yy::location()); }
")"           { return yy::parser::make_RPAREN(yy::location()); }
"true"        { return yy::parser::make_TRUE(yy::location()); }
"false"       { return yy::parser::make_FALSE(yy::location()); }
[0-9]+        { return yy::parser::make_INTEGER(atoi(yytext), yy::location()); }
[0-9]+\.[0-9]+ { return yy::parser::make_REAL(atof(yytext), yy::location()); }
[a-zA-Z][a-zA-Z0-9]* { return yy::parser::make_IDENTIFIER(std::make_shared<Identifier>(std::string{yytext}), yy::location()); }
.             { yyerror("Invalid character"); }
<<EOF>>     { return yyterminate(); }

%%

int yyerror(const char* msg) {
    std::cerr << "Error: " << msg << std::endl;
    return 0;
}
